---
import Container from "./../Atom/Container.astro"
import Button from "./../Atom/Button.astro"
import Link from "./../Icons/Link.astro"
import { URL_SERVER } from "@/consts/server"
---

<div class="relative" id="home">
	<div
		aria-hidden="true"
		class="absolute inset-0 grid grid-cols-2 -space-x-52 opacity-40 dark:opacity-20"
	>
		<div class="h-56 bg-gradient-to-br from-primary to-purple-400 blur-[106px] dark:from-blue-700">
		</div>
		<div class="h-32 bg-gradient-to-r from-cyan-400 to-sky-300 blur-[106px] dark:to-indigo-600">
		</div>
	</div>
	<Container>
		<div class="relative ml-auto pt-20">
			<div class="mx-auto text-center lg:w-2/3">
				<div
					class="gradient-text to-danger bg-gradient-to-r from-primary to-purple-400 bg-clip-text pb-4 text-center text-8xl font-extrabold tracking-tighter text-transparent"
				>
					GraphGlean
				</div>
				<p class="mt-5 text-gray-700 dark:text-gray-300">
					Optimiza tus publicaciones en redes sociales con el Protocolo Open Graph.
				</p>
				<p class="mb-6 mt-1 text-gray-700 dark:text-gray-300">
					Implementar etiquetas Open Graph asegura que tus enlaces se compartan con imágenes,
					títulos y descripciones precisas, mejorando la visibilidad y el atractivo de tu contenido
					en línea.
				</p>
				<form id="gleanForm">
					<div class="relative mb-8">
						<div class="pointer-events-none absolute inset-y-0 start-0 flex items-center ps-3.5">
							<Link />
						</div>
						<input
							type="url"
							id="input-group-1"
							class="block w-full rounded-lg border border-gray-300 p-2.5 ps-10 text-sm focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
							placeholder="https://moises35.vercel.app/"
						/>
					</div>
					<div class="mt-1 flex flex-wrap justify-center gap-x-6 gap-y-4">
						<Button id="gleanBtn" text="Obtener" />
					</div>
					<!-- Error message -->
					<p id="error-message" class="mt-2 hidden text-sm text-red-500"></p>
				</form>
			</div>
		</div>
	</Container>
	<div id="open-graph"></div>
</div>

<style>
	.gradient-text {
		background-clip: text;
		color: transparent;
		background-image: linear-gradient(to bottom right, red);
	}
</style>

<script is:inline define:vars={{ url_fetch: URL_SERVER }}>
	const gleanForm = document.getElementById("gleanForm")
	const errorMessage = document.getElementById("error-message")

	const validateURL = (url) => {
		const urlRegex = /^(https?:\/\/)?([\w-]+\.)+[\w-]+(\/[\w-./?%&=]*)?$/
		return urlRegex.test(url)
	}

	gleanForm.addEventListener("submit", (e) => {
		e.preventDefault()
		const url_website = document.querySelector("input[type='url']").value
		if (validateURL(url_website)) {
			try {
				fetch("./.netlify/functions/scraper", {
					method: "POST",
					body: JSON.stringify({
						url: url_website,
					}),
				})
					.then((res) => {
						if (res.ok) {
							return res.json()
						}
						errorMessage.textContent = "Ocurrió un error al obtener la información."
						errorMessage.classList.remove("hidden")

						throw new Error("Ocurrió un error al obtener la información.")
					})
					.then((data) => {
						// Dentro del contenedor #open-graph se inserta el componente OpenGraph
						const openGraph = document.getElementById("open-graph")
						openGraph.innerHTML = `<OpenGraph title="${data.og_title}" link="${data.og_url}" description="${data.og_description}" srcCover="${data.og_image}" />`

						errorMessage.classList.add("hidden")
					})
			} catch (err) {
				errorMessage.textContent = "Ocurrió un error al obtener la información."
				console.log(`El error ocurrio en el try: ${err}`)
			}
		} else {
			errorMessage.textContent = "La URL no es válida."
			errorMessage.classList.remove("hidden")
		}
	})
</script>
